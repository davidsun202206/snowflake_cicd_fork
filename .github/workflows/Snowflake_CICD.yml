name: Snowflake_CICD

on:
  # push:
  #   branches:
  #     - dev
  workflow_dispatch:   # Allow manual triggering of the workflow

jobs:
  deploy_dev:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Retrieve repository
        uses: actions/checkout@v3
      
      - name: Use Python 3.8.x
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.x

      - name: Install SnowSQL
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-1.2.9-linux_x86_64.bash
          SNOWSQL_DEST=~/bin SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-1.2.9-linux_x86_64.bash
        
      - name: Deploy to DEV
        env:
          # SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          # SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          # SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          # SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          # SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          # SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}

          SNOWSQL_PWD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_USER: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWSQL_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWSQL_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWSQL_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      
        run: |
          ~/bin/snowsql -q """CREATE SCHEMA IF NOT EXISTS SCHEMACHANGE;
                              CREATE OR REPLACE TABLE SCHEMACHANGE.CHANGE_HISTORY
                             (
                              VERSION VARCHAR
                             ,DESCRIPTION VARCHAR
                             ,SCRIPT VARCHAR
                             ,SCRIPT_TYPE VARCHAR
                             ,CHECKSUM VARCHAR
                             ,EXECUTION_TIME NUMBER
                             ,STATUS VARCHAR
                             ,INSTALLED_BY VARCHAR
                             ,INSTALLED_ON TIMESTAMP_LTZ
                             ,PROJECT VARCHAR
                             );
                          """
          pip install schemachange
          # for sql_file in $(find $GITHUB_WORKSPACE/scripts/versioned -name '*.sql'); do
          #   relative_path="${sql_file#$GITHUB_WORKSPACE/}"
          #   echo $relative_path
          #   snow --config-file $GITHUB_WORKSPACE/config.toml sql -q "EXECUTE IMMEDIATE FROM @snowflake_cicd/branches/main/$relative_path"
          # done
          for dir in "$GITHUB_WORKSPACE/scripts"/*/; do
              # Extract the subdirectory name
              subdir=$(basename "$dir")
              echo "Found subdirectory: $subdir"
              ~/bin/snowsql -q """CREATE OR REPLACE TABLE SCHEMACHANGE.CHANGE_HISTORY_$subdir AS SELECT * FROM SCHEMACHANGE.CHANGE_HISTORY WHERE PROJECT = '$subdir'"""
              schemachange -f $GITHUB_WORKSPACE/scripts/$subdir -a $SNOWSQL_ACCOUNT -u $SNOWSQL_USER -r $SNOWSQL_ROLE -w $SNOWSQL_WAREHOUSE -d $SNOWSQL_DATABASE -c $SNOWSQL_DATABASE.SCHEMACHANGE.CHANGE_HISTORY_$subdir         
              
              ~/bin/snowsql -q """MERGE INTO SCHEMACHANGE.CHANGE_HISTORY target
                                  USING SCHEMACHANGE.CHANGE_HISTORY_$subdir source 
                                  ON target.SCRIPT = source.SCRIPT AND target.PROJECT = '$subdir' 
                                  WHEN MATCHED AND (target.SCRIPT_TYPE = 'A' OR (target.SCRIPT_TYPE = 'R' AND target.CHECKSUM != source.CHECKSUM))
                                      THEN UPDATE SET 
                                      target.CHECKSUM = source.CHECKSUM
                                      ,target.EXECUTION_TIME = source.EXECUTION_TIME
                                      ,target.STATUS = source.STATUS
                                      ,target.INSTALLED_BY = source.INSTALLED_BY
                                      ,target.INSTALLED_ON = source.INSTALLED_ON
                                      ,target.PROJECT = '$subdir'            
                                  WHEN NOT MATCHED 
                                      THEN INSERT (
                                      VERSION
                                      ,DESCRIPTION
                                      ,SCRIPT
                                      ,SCRIPT_TYPE
                                      ,CHECKSUM
                                      ,EXECUTION_TIME
                                      ,STATUS
                                      ,INSTALLED_BY
                                      ,INSTALLED_ON
                                      ,PROJECT
                                      ) 
                                      VALUES (
                                      source.VERSION
                                      ,source.DESCRIPTION
                                      ,source.SCRIPT
                                      ,source.SCRIPT_TYPE
                                      ,source.CHECKSUM
                                      ,source.EXECUTION_TIME
                                      ,source.STATUS
                                      ,source.INSTALLED_BY
                                      ,source.INSTALLED_ON
                                      ,'$subdir'
                                      );
              """
          
          
          
          done

          

  deploy_qut:
    if: github.ref == 'refs/heads/dev'  # Change this to manually trigger or depend on dev job
    needs: deploy_dev  # Ensures this job runs after dev deployment
    runs-on: ubuntu-latest
    environment: qut
    steps:
      - name: Retrieve repository
        uses: actions/checkout@v3
      
      - name: Use Python 3.8.x
        uses: actions/setup-python@v4
        with:
          python-version: 3.8.x

      - name: Deploy to QUT
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          pip install schemachange
          schemachange -f $GITHUB_WORKSPACE -a $SNOWFLAKE_ACCOUNT -u $SNOWFLAKE_USERNAME -r $SNOWFLAKE_ROLE -w $SNOWFLAKE_WAREHOUSE -d $SNOWFLAKE_DATABASE -c $SNOWFLAKE_DATABASE.SCHEMACHANGE.CHANGE_HISTORY_QUT --create-change-history-table
